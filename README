## Automated ELK Stack Deployment

The files in this repository were used to configure the network depicted below.

https://github.com/balorden/Elk-Stack-Project1/blob/main/Images/NetworkTopography.png

These files have been tested and used to generate a live ELK deployment on Azure. They can be used to either recreate the entire deployment pictured above. Alternatively, select portions of the _____ file may be used to install only certain pieces of it, such as Filebeat.

https://github.com/balorden/Elk-Stack-Project1/blob/main/Images/Docker_Container.png

This document contains the following details:
- Description of the Topologu
- Access Policies
- ELK Configuration
  - Beats in Use
  - Machines Being Monitored
- How to Use the Ansible Build


### Description of the Topology

his document contains the following details:

Description of the Topology
Access Policies
ELK Configuration
Beats in Use
Machines Being Monitored
How to Use the Ansible Build
Description of the Topology
The main purpose of this network is to expose a load-balanced and monitored instance of DVWA, the Damn Vulnerable Web Application.

Load balancing ensures that the application will be highly available, in addition to restricting access to the network. Load balancers offer security on the application layer, making it's routing decisions based off highly detailed information gathered from incoming traffic, while also keeping the network redundant. To add even more security to the network, we ensured the only node that is externally exposed is the Jump-Box, while access to any other node on the network is restricted by SSH key. The Jump-Box is not externally exposed to the internet, but rather specific IPs through a security group configured with strict internal and external rule sets.

Integrating an ELK server allows users to easily monitor the vulnerable VMs for changes to the log data and system statistics.

The configuration details of each machine may be found below.

Name	Function	        IP Address	    Operating System  
Jump-Box Gateway	      10.1.0.4	    Linux/Ubuntu 18.4
Web1	DVWA/Docker	      10.1.0.5	    Linux/Ubuntu 18.4
LocosWeb2	DVWA/Docker	  10.1.0.6	    Linux/Ubuntu 18.4
ELK-Machine	ELK Cont    10.2.0.4	    Linux/Ubuntu 18.4
Access Policies
The machines on the internal network are not exposed to the public Internet.

Only the Jump-Box machine can accept connections from the Internet. Access to this machine is only allowed from the following IP address: 73.220.175.58

Machines within the network can only be accessed by Jump-Box, with the IP address of 10.1.0.7

A summary of the access policies in place can be found in the table below.

Name	Publicly Accessible	Allowed Ports	Allowed IP Addresses
Jump-Box	Yes	 3389,22,80, 5601	         73.220.175.57, 10.0.0.5, 10.0.0.6, 10.0.0.7, 10.2.0.4
Web1	    No	22	10.1.0.4 80
LocosWeb2	No	22	10.1.0.5 80
ELK-Machine	Yes	5601,22	10.2.0.4, 73.220.175.57
Elk Configuration
Ansible was used to automate configuration of the ELK machine. No configuration was performed manually, which is advantageous because it allows quick deployment of virtual machines and configurations can be stored as playbooks and used again as needed. The playbook implements the following tasks:

Install Docker ISO
Install Docker/python modules
Increase virtual memory
Use increased memory
Download and launch ELK container
The following screenshot displays the result of running docker ps after successfully configuring the ELK instance. Docker.ps

Target Machines & Beats
This ELK server is configured to monitor the following machines:

10.1.0.5
10.1.0.6
10.1.0.7
We have installed the following Beats on these machines:

Filebeat
Metricbeat
Filebeat allows us to gather log data from each machine, while Metricbeat allows us to gather system statistics from each machine.

Using the Playbook
In order to use the playbook, you will need to have an Ansible control node already configured. Assuming you have such a control node provisioned:

SSH into the control node and follow the steps below:

Copy the .yml file to /etc/ansible/roles.
Update the config.yml file to include the group of target machines.
Run the playbook, and navigate to http://40.84.184.92:5601/app/kibana#/home to check that the installation worked as expected.
For Elk installation, use this command in '/etc/ansible' filepath: install-elk.yml `curl https://github.com/WilldTay91/Automated-ELK-Stack-Deployment/blob/master/VM_Config_Files/Install-ELK.ymlâ€™
